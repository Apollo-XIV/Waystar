* 
* ==> Audit <==
* |--------------|------|----------|------|---------|---------------------|---------------------|
|   Command    | Args | Profile  | User | Version |     Start Time      |      End Time       |
|--------------|------|----------|------|---------|---------------------|---------------------|
| update-check |      | minikube | dev  | v1.30.1 | 03 Jul 23 09:25 UTC | 03 Jul 23 09:25 UTC |
| start        |      | minikube | dev  | v1.30.1 | 03 Jul 23 09:34 UTC |                     |
| update-check |      | minikube | dev  | v1.30.1 | 03 Jul 23 10:00 UTC | 03 Jul 23 10:00 UTC |
| dashboard    |      | minikube | dev  | v1.30.1 | 03 Jul 23 10:13 UTC |                     |
| start        |      | minikube | dev  | v1.30.1 | 03 Jul 23 10:13 UTC |                     |
| update-check |      | minikube | dev  | v1.30.1 | 03 Jul 23 10:35 UTC | 03 Jul 23 10:35 UTC |
| start        |      | minikube | dev  | v1.30.1 | 03 Jul 23 10:35 UTC |                     |
| start        |      | minikube | dev  | v1.30.1 | 03 Jul 23 10:52 UTC |                     |
| start        |      | minikube | dev  | v1.30.1 | 03 Jul 23 10:53 UTC |                     |
| start        | -v=5 | minikube | dev  | v1.30.1 | 03 Jul 23 10:54 UTC |                     |
|--------------|------|----------|------|---------|---------------------|---------------------|

* 
* ==> Last Start <==
* Log file created at: 2023/07/03 10:54:05
Running on machine: b84f6269af30
Binary: Built with gc go1.20.2 for linux/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0703 10:54:05.852218   16841 out.go:296] Setting OutFile to fd 1 ...
I0703 10:54:05.852316   16841 out.go:348] isatty.IsTerminal(1) = true
I0703 10:54:05.852318   16841 out.go:309] Setting ErrFile to fd 2...
I0703 10:54:05.852321   16841 out.go:348] isatty.IsTerminal(2) = true
I0703 10:54:05.852388   16841 root.go:336] Updating PATH: /home/dev/.minikube/bin
W0703 10:54:05.852460   16841 root.go:312] Error reading config file at /home/dev/.minikube/config/config.json: open /home/dev/.minikube/config/config.json: no such file or directory
I0703 10:54:05.852709   16841 out.go:303] Setting JSON to false
I0703 10:54:05.853091   16841 start.go:125] hostinfo: {"hostname":"b84f6269af30","uptime":1460,"bootTime":1688380186,"procs":35,"os":"linux","platform":"ubuntu","platformFamily":"debian","platformVersion":"22.04","kernelVersion":"5.10.16.3-microsoft-standard-WSL2","kernelArch":"x86_64","virtualizationSystem":"docker","virtualizationRole":"guest","hostId":"9538b80a-03cc-4928-beb7-43fa1d1116c9"}
I0703 10:54:05.853120   16841 start.go:135] virtualization: docker guest
I0703 10:54:05.858369   16841 out.go:177] 😄  minikube v1.30.1 on Ubuntu 22.04 (docker/amd64)
I0703 10:54:05.863056   16841 notify.go:220] Checking for updates...
I0703 10:54:05.863271   16841 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.26.3
I0703 10:54:05.863304   16841 driver.go:375] Setting default libvirt URI to qemu:///system
I0703 10:54:05.885436   16841 docker.go:121] docker version: linux-20.10.25+azure-2:
I0703 10:54:05.885526   16841 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0703 10:54:05.944883   16841 info.go:266] docker info: {ID:5HDB:DC2H:GYAC:KIVF:PLDT:B3OF:2BLP:RBFJ:6Y7U:A2BE:QFRU:MLCD Containers:2 ContainersRunning:1 ContainersPaused:0 ContainersStopped:1 Images:2 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:true KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:32 OomKillDisable:true NGoroutines:45 SystemTime:2023-07-03 10:54:05.908046545 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:5.10.16.3-microsoft-standard-WSL2 OperatingSystem:Ubuntu 22.04.2 LTS (containerized) OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:2 MemTotal:8344264704 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:b84f6269af30 Labels:[] ExperimentalBuild:false ServerVersion:20.10.25+azure-2 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:3dce8eb055cbb6872793272b4f20ed16117344f8 Expected:3dce8eb055cbb6872793272b4f20ed16117344f8} RuncCommit:{ID:860f061b76bb4fc671f0f9e900f7d80ff93d4eb7 Expected:860f061b76bb4fc671f0f9e900f7d80ff93d4eb7} InitCommit:{ID: Expected:} SecurityOptions:[name=seccomp,profile=default] ProductLicense: Warnings:[WARNING: No blkio throttle.read_bps_device support WARNING: No blkio throttle.write_bps_device support WARNING: No blkio throttle.read_iops_device support WARNING: No blkio throttle.write_iops_device support] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/home/dev/.docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShadowedPaths:[/usr/libexec/docker/cli-plugins/docker-buildx] ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.11.0] map[Name:compose Path:/usr/libexec/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:2.18.1+azure-2]] Warnings:<nil>}}
I0703 10:54:05.944942   16841 docker.go:294] overlay module found
I0703 10:54:05.950817   16841 out.go:177] ✨  Using the docker driver based on existing profile
I0703 10:54:05.955839   16841 start.go:295] selected driver: docker
I0703 10:54:05.955848   16841 start.go:870] validating driver "docker" against &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.26.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/dev:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0703 10:54:05.955920   16841 start.go:881] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0703 10:54:05.955995   16841 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0703 10:54:06.031826   16841 info.go:266] docker info: {ID:5HDB:DC2H:GYAC:KIVF:PLDT:B3OF:2BLP:RBFJ:6Y7U:A2BE:QFRU:MLCD Containers:2 ContainersRunning:1 ContainersPaused:0 ContainersStopped:1 Images:2 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:true KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:32 OomKillDisable:true NGoroutines:45 SystemTime:2023-07-03 10:54:05.970924432 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:5.10.16.3-microsoft-standard-WSL2 OperatingSystem:Ubuntu 22.04.2 LTS (containerized) OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:2 MemTotal:8344264704 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:b84f6269af30 Labels:[] ExperimentalBuild:false ServerVersion:20.10.25+azure-2 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:3dce8eb055cbb6872793272b4f20ed16117344f8 Expected:3dce8eb055cbb6872793272b4f20ed16117344f8} RuncCommit:{ID:860f061b76bb4fc671f0f9e900f7d80ff93d4eb7 Expected:860f061b76bb4fc671f0f9e900f7d80ff93d4eb7} InitCommit:{ID: Expected:} SecurityOptions:[name=seccomp,profile=default] ProductLicense: Warnings:[WARNING: No blkio throttle.read_bps_device support WARNING: No blkio throttle.write_bps_device support WARNING: No blkio throttle.read_iops_device support WARNING: No blkio throttle.write_iops_device support] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/home/dev/.docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShadowedPaths:[/usr/libexec/docker/cli-plugins/docker-buildx] ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.11.0] map[Name:compose Path:/usr/libexec/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:2.18.1+azure-2]] Warnings:<nil>}}
I0703 10:54:06.032079   16841 cni.go:84] Creating CNI manager for ""
I0703 10:54:06.032086   16841 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0703 10:54:06.032093   16841 start_flags.go:319] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.26.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/dev:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0703 10:54:06.037184   16841 out.go:177] 👍  Starting control plane node minikube in cluster minikube
I0703 10:54:06.041803   16841 cache.go:120] Beginning downloading kic base image for docker with docker
I0703 10:54:06.047727   16841 out.go:177] 🚜  Pulling base image ...
I0703 10:54:06.056190   16841 preload.go:132] Checking if preload exists for k8s version v1.26.3 and runtime docker
I0703 10:54:06.056235   16841 preload.go:148] Found local preload: /home/dev/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4
I0703 10:54:06.056241   16841 cache.go:57] Caching tarball of preloaded images
I0703 10:54:06.056309   16841 preload.go:174] Found /home/dev/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.3-docker-overlay2-amd64.tar.lz4 in cache, skipping download
I0703 10:54:06.056315   16841 cache.go:60] Finished verifying existence of preloaded tar for  v1.26.3 on docker
I0703 10:54:06.056425   16841 profile.go:148] Saving config to /home/dev/.minikube/profiles/minikube/config.json ...
I0703 10:54:06.056639   16841 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 in local docker daemon
I0703 10:54:06.085200   16841 image.go:83] Found gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 in local docker daemon, skipping pull
I0703 10:54:06.085214   16841 cache.go:143] gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 exists in daemon, skipping load
I0703 10:54:06.085230   16841 cache.go:193] Successfully downloaded all kic artifacts
I0703 10:54:06.085254   16841 start.go:364] acquiring machines lock for minikube: {Name:mka8aebe960f96844893e831cbbb0d8254453735 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0703 10:54:06.085321   16841 start.go:368] acquired machines lock for "minikube" in 50.266µs
I0703 10:54:06.085344   16841 start.go:96] Skipping create...Using existing machine configuration
I0703 10:54:06.085349   16841 fix.go:55] fixHost starting: 
I0703 10:54:06.085646   16841 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0703 10:54:06.105129   16841 fix.go:103] recreateIfNeeded on minikube: state=Running err=<nil>
W0703 10:54:06.105148   16841 fix.go:129] unexpected machine state, will restart: <nil>
I0703 10:54:06.111665   16841 out.go:177] 🏃  Updating the running docker "minikube" container ...
I0703 10:54:06.121425   16841 machine.go:88] provisioning docker machine ...
I0703 10:54:06.121451   16841 ubuntu.go:169] provisioning hostname "minikube"
I0703 10:54:06.121522   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:06.140907   16841 main.go:141] libmachine: Using SSH client type: native
I0703 10:54:06.141214   16841 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0703 10:54:06.141221   16841 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0703 10:54:06.268466   16841 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0703 10:54:06.268532   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:06.284215   16841 main.go:141] libmachine: Using SSH client type: native
I0703 10:54:06.284496   16841 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0703 10:54:06.284505   16841 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0703 10:54:06.358289   16841 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0703 10:54:06.358302   16841 ubuntu.go:175] set auth options {CertDir:/home/dev/.minikube CaCertPath:/home/dev/.minikube/certs/ca.pem CaPrivateKeyPath:/home/dev/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/dev/.minikube/machines/server.pem ServerKeyPath:/home/dev/.minikube/machines/server-key.pem ClientKeyPath:/home/dev/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/dev/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/dev/.minikube}
I0703 10:54:06.358318   16841 ubuntu.go:177] setting up certificates
I0703 10:54:06.358329   16841 provision.go:83] configureAuth start
I0703 10:54:06.358384   16841 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0703 10:54:06.376302   16841 provision.go:138] copyHostCerts
I0703 10:54:06.376330   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/certs/key.pem -> /home/dev/.minikube/key.pem
I0703 10:54:06.376358   16841 exec_runner.go:144] found /home/dev/.minikube/key.pem, removing ...
I0703 10:54:06.376363   16841 exec_runner.go:207] rm: /home/dev/.minikube/key.pem
I0703 10:54:06.376436   16841 exec_runner.go:151] cp: /home/dev/.minikube/certs/key.pem --> /home/dev/.minikube/key.pem (1679 bytes)
I0703 10:54:06.376551   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/certs/ca.pem -> /home/dev/.minikube/ca.pem
I0703 10:54:06.376567   16841 exec_runner.go:144] found /home/dev/.minikube/ca.pem, removing ...
I0703 10:54:06.376586   16841 exec_runner.go:207] rm: /home/dev/.minikube/ca.pem
I0703 10:54:06.376627   16841 exec_runner.go:151] cp: /home/dev/.minikube/certs/ca.pem --> /home/dev/.minikube/ca.pem (1082 bytes)
I0703 10:54:06.376688   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/certs/cert.pem -> /home/dev/.minikube/cert.pem
I0703 10:54:06.376701   16841 exec_runner.go:144] found /home/dev/.minikube/cert.pem, removing ...
I0703 10:54:06.376704   16841 exec_runner.go:207] rm: /home/dev/.minikube/cert.pem
I0703 10:54:06.376734   16841 exec_runner.go:151] cp: /home/dev/.minikube/certs/cert.pem --> /home/dev/.minikube/cert.pem (1123 bytes)
I0703 10:54:06.376772   16841 provision.go:112] generating server cert: /home/dev/.minikube/machines/server.pem ca-key=/home/dev/.minikube/certs/ca.pem private-key=/home/dev/.minikube/certs/ca-key.pem org=unknown.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0703 10:54:06.477710   16841 provision.go:172] copyRemoteCerts
I0703 10:54:06.477765   16841 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0703 10:54:06.477798   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:06.493402   16841 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/dev/.minikube/machines/minikube/id_rsa Username:docker}
I0703 10:54:06.574282   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/machines/server.pem -> /etc/docker/server.pem
I0703 10:54:06.574313   16841 ssh_runner.go:362] scp /home/dev/.minikube/machines/server.pem --> /etc/docker/server.pem (1204 bytes)
I0703 10:54:06.585331   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/machines/server-key.pem -> /etc/docker/server-key.pem
I0703 10:54:06.585361   16841 ssh_runner.go:362] scp /home/dev/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0703 10:54:06.597987   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/certs/ca.pem -> /etc/docker/ca.pem
I0703 10:54:06.598024   16841 ssh_runner.go:362] scp /home/dev/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1082 bytes)
I0703 10:54:06.611418   16841 provision.go:86] duration metric: configureAuth took 253.078441ms
I0703 10:54:06.611428   16841 ubuntu.go:193] setting minikube options for container-runtime
I0703 10:54:06.611550   16841 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.26.3
I0703 10:54:06.611589   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:06.625116   16841 main.go:141] libmachine: Using SSH client type: native
I0703 10:54:06.625372   16841 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0703 10:54:06.625377   16841 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0703 10:54:06.697391   16841 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0703 10:54:06.697400   16841 ubuntu.go:71] root file system type: overlay
I0703 10:54:06.697461   16841 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0703 10:54:06.697509   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:06.720525   16841 main.go:141] libmachine: Using SSH client type: native
I0703 10:54:06.720773   16841 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0703 10:54:06.720808   16841 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0703 10:54:06.847514   16841 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0703 10:54:06.847567   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:06.878818   16841 main.go:141] libmachine: Using SSH client type: native
I0703 10:54:06.879221   16841 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x80e3e0] 0x811480 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0703 10:54:06.879235   16841 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0703 10:54:07.004759   16841 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0703 10:54:07.004771   16841 machine.go:91] provisioned docker machine in 883.33533ms
I0703 10:54:07.004777   16841 start.go:300] post-start starting for "minikube" (driver="docker")
I0703 10:54:07.004780   16841 start.go:328] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0703 10:54:07.004837   16841 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0703 10:54:07.004869   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:07.019545   16841 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/dev/.minikube/machines/minikube/id_rsa Username:docker}
I0703 10:54:07.059483   16841 ssh_runner.go:195] Run: cat /etc/os-release
I0703 10:54:07.060946   16841 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0703 10:54:07.061000   16841 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0703 10:54:07.061007   16841 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0703 10:54:07.061010   16841 info.go:137] Remote host: Ubuntu 20.04.5 LTS
I0703 10:54:07.061016   16841 filesync.go:126] Scanning /home/dev/.minikube/addons for local assets ...
I0703 10:54:07.061045   16841 filesync.go:126] Scanning /home/dev/.minikube/files for local assets ...
I0703 10:54:07.061057   16841 start.go:303] post-start completed in 56.276834ms
I0703 10:54:07.061085   16841 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0703 10:54:07.061107   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:07.078119   16841 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/dev/.minikube/machines/minikube/id_rsa Username:docker}
I0703 10:54:07.162598   16841 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0703 10:54:07.164761   16841 fix.go:57] fixHost completed within 1.079411047s
I0703 10:54:07.164768   16841 start.go:83] releasing machines lock for "minikube", held for 1.079442037s
I0703 10:54:07.164802   16841 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0703 10:54:07.178333   16841 ssh_runner.go:195] Run: cat /version.json
I0703 10:54:07.178367   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:07.178532   16841 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0703 10:54:07.178564   16841 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0703 10:54:07.195873   16841 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/dev/.minikube/machines/minikube/id_rsa Username:docker}
I0703 10:54:07.196859   16841 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/dev/.minikube/machines/minikube/id_rsa Username:docker}
I0703 10:54:07.282150   16841 ssh_runner.go:195] Run: systemctl --version
I0703 10:54:07.548791   16841 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0703 10:54:07.551969   16841 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0703 10:54:07.563410   16841 cni.go:229] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0703 10:54:07.563471   16841 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0703 10:54:07.568967   16841 cni.go:258] no active bridge cni configs found in "/etc/cni/net.d" - nothing to disable
I0703 10:54:07.568981   16841 start.go:481] detecting cgroup driver to use...
I0703 10:54:07.569002   16841 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0703 10:54:07.569066   16841 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0703 10:54:07.579426   16841 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0703 10:54:07.585411   16841 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0703 10:54:07.592637   16841 containerd.go:145] configuring containerd to use "cgroupfs" as cgroup driver...
I0703 10:54:07.592697   16841 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0703 10:54:07.598228   16841 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0703 10:54:07.603284   16841 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0703 10:54:07.609259   16841 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0703 10:54:07.614931   16841 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0703 10:54:07.619681   16841 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0703 10:54:07.625602   16841 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0703 10:54:07.630332   16841 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0703 10:54:07.634927   16841 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0703 10:54:07.716414   16841 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0703 10:54:07.833849   16841 start.go:481] detecting cgroup driver to use...
I0703 10:54:07.833876   16841 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0703 10:54:07.833917   16841 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0703 10:54:07.849789   16841 cruntime.go:276] skipping containerd shutdown because we are bound to it
I0703 10:54:07.849890   16841 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0703 10:54:07.857804   16841 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0703 10:54:07.875668   16841 ssh_runner.go:195] Run: which cri-dockerd
I0703 10:54:07.878328   16841 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0703 10:54:07.883989   16841 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I0703 10:54:07.894240   16841 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0703 10:54:07.974232   16841 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0703 10:54:08.088612   16841 docker.go:538] configuring docker to use "cgroupfs" as cgroup driver...
I0703 10:54:08.088627   16841 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (144 bytes)
I0703 10:54:08.101048   16841 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0703 10:54:08.195212   16841 ssh_runner.go:195] Run: sudo systemctl restart docker
I0703 10:54:11.633415   16841 ssh_runner.go:235] Completed: sudo systemctl restart docker: (3.438186837s)
I0703 10:54:11.633463   16841 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0703 10:54:11.736230   16841 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0703 10:54:11.825659   16841 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0703 10:54:11.915496   16841 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0703 10:54:11.995032   16841 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0703 10:54:12.007164   16841 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0703 10:54:12.076535   16841 ssh_runner.go:195] Run: sudo systemctl restart cri-docker
I0703 10:54:12.128689   16841 start.go:528] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0703 10:54:12.128741   16841 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0703 10:54:12.131353   16841 start.go:549] Will wait 60s for crictl version
I0703 10:54:12.131413   16841 ssh_runner.go:195] Run: which crictl
I0703 10:54:12.133182   16841 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0703 10:54:12.154126   16841 start.go:565] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  23.0.2
RuntimeApiVersion:  v1alpha2
I0703 10:54:12.154175   16841 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0703 10:54:12.169485   16841 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0703 10:54:12.191747   16841 out.go:204] 🐳  Preparing Kubernetes v1.26.3 on Docker 23.0.2 ...
I0703 10:54:12.191828   16841 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0703 10:54:12.207853   16841 ssh_runner.go:195] Run: grep 192.168.49.1	host.minikube.internal$ /etc/hosts
I0703 10:54:12.210528   16841 preload.go:132] Checking if preload exists for k8s version v1.26.3 and runtime docker
I0703 10:54:12.210574   16841 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0703 10:54:12.221561   16841 docker.go:639] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.26.3
registry.k8s.io/kube-scheduler:v1.26.3
registry.k8s.io/kube-controller-manager:v1.26.3
registry.k8s.io/kube-proxy:v1.26.3
registry.k8s.io/etcd:3.5.6-0
registry.k8s.io/pause:3.9
registry.k8s.io/coredns/coredns:v1.9.3
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0703 10:54:12.221572   16841 docker.go:569] Images already preloaded, skipping extraction
I0703 10:54:12.221619   16841 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0703 10:54:12.232741   16841 docker.go:639] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.26.3
registry.k8s.io/kube-controller-manager:v1.26.3
registry.k8s.io/kube-scheduler:v1.26.3
registry.k8s.io/kube-proxy:v1.26.3
registry.k8s.io/etcd:3.5.6-0
registry.k8s.io/pause:3.9
registry.k8s.io/coredns/coredns:v1.9.3
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0703 10:54:12.232751   16841 cache_images.go:84] Images are preloaded, skipping loading
I0703 10:54:12.232795   16841 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0703 10:54:12.247010   16841 cni.go:84] Creating CNI manager for ""
I0703 10:54:12.247022   16841 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0703 10:54:12.247030   16841 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I0703 10:54:12.247040   16841 kubeadm.go:172] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.26.3 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[hairpinMode:hairpin-veth runtimeRequestTimeout:15m]}
I0703 10:54:12.247130   16841 kubeadm.go:177] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: /var/run/cri-dockerd.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.26.3
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0703 10:54:12.247175   16841 kubeadm.go:968] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.26.3/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.26.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I0703 10:54:12.247220   16841 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.26.3
I0703 10:54:12.252476   16841 binaries.go:44] Found k8s binaries, skipping transfer
I0703 10:54:12.252516   16841 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0703 10:54:12.257187   16841 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (369 bytes)
I0703 10:54:12.266177   16841 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0703 10:54:12.274662   16841 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2084 bytes)
I0703 10:54:12.283472   16841 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0703 10:54:12.285150   16841 certs.go:56] Setting up /home/dev/.minikube/profiles/minikube for IP: 192.168.49.2
I0703 10:54:12.285163   16841 certs.go:186] acquiring lock for shared ca certs: {Name:mkc7c6196a8c093b0c82a72ce16876c69f0409fb Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0703 10:54:12.285239   16841 certs.go:195] skipping minikubeCA CA generation: /home/dev/.minikube/ca.key
I0703 10:54:12.285260   16841 certs.go:195] skipping proxyClientCA CA generation: /home/dev/.minikube/proxy-client-ca.key
I0703 10:54:12.285308   16841 certs.go:311] skipping minikube-user signed cert generation: /home/dev/.minikube/profiles/minikube/client.key
I0703 10:54:12.285339   16841 certs.go:311] skipping minikube signed cert generation: /home/dev/.minikube/profiles/minikube/apiserver.key.dd3b5fb2
I0703 10:54:12.285360   16841 certs.go:311] skipping aggregator signed cert generation: /home/dev/.minikube/profiles/minikube/proxy-client.key
I0703 10:54:12.285365   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/profiles/minikube/apiserver.crt -> /var/lib/minikube/certs/apiserver.crt
I0703 10:54:12.285371   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/profiles/minikube/apiserver.key -> /var/lib/minikube/certs/apiserver.key
I0703 10:54:12.285377   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/profiles/minikube/proxy-client.crt -> /var/lib/minikube/certs/proxy-client.crt
I0703 10:54:12.285381   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/profiles/minikube/proxy-client.key -> /var/lib/minikube/certs/proxy-client.key
I0703 10:54:12.285390   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/ca.crt -> /var/lib/minikube/certs/ca.crt
I0703 10:54:12.285395   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/ca.key -> /var/lib/minikube/certs/ca.key
I0703 10:54:12.285399   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/proxy-client-ca.crt -> /var/lib/minikube/certs/proxy-client-ca.crt
I0703 10:54:12.285404   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/proxy-client-ca.key -> /var/lib/minikube/certs/proxy-client-ca.key
I0703 10:54:12.285431   16841 certs.go:401] found cert: /home/dev/.minikube/certs/home/dev/.minikube/certs/ca-key.pem (1675 bytes)
I0703 10:54:12.285445   16841 certs.go:401] found cert: /home/dev/.minikube/certs/home/dev/.minikube/certs/ca.pem (1082 bytes)
I0703 10:54:12.285463   16841 certs.go:401] found cert: /home/dev/.minikube/certs/home/dev/.minikube/certs/cert.pem (1123 bytes)
I0703 10:54:12.285475   16841 certs.go:401] found cert: /home/dev/.minikube/certs/home/dev/.minikube/certs/key.pem (1679 bytes)
I0703 10:54:12.285490   16841 vm_assets.go:163] NewFileAsset: /home/dev/.minikube/ca.crt -> /usr/share/ca-certificates/minikubeCA.pem
I0703 10:54:12.285798   16841 ssh_runner.go:362] scp /home/dev/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1399 bytes)
I0703 10:54:12.299066   16841 ssh_runner.go:362] scp /home/dev/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1679 bytes)
I0703 10:54:12.311400   16841 ssh_runner.go:362] scp /home/dev/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0703 10:54:12.323986   16841 ssh_runner.go:362] scp /home/dev/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1679 bytes)
I0703 10:54:12.336093   16841 ssh_runner.go:362] scp /home/dev/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0703 10:54:12.347370   16841 ssh_runner.go:362] scp /home/dev/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1679 bytes)
I0703 10:54:12.359032   16841 ssh_runner.go:362] scp /home/dev/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0703 10:54:12.370605   16841 ssh_runner.go:362] scp /home/dev/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1675 bytes)
I0703 10:54:12.381442   16841 ssh_runner.go:362] scp /home/dev/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0703 10:54:12.392473   16841 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I0703 10:54:12.402700   16841 ssh_runner.go:195] Run: openssl version
I0703 10:54:12.405629   16841 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0703 10:54:12.410229   16841 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0703 10:54:12.412448   16841 certs.go:444] hashing: -rw-r--r-- 1 root root 1111 Jul  3 10:36 /usr/share/ca-certificates/minikubeCA.pem
I0703 10:54:12.412490   16841 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0703 10:54:12.415535   16841 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0703 10:54:12.420377   16841 kubeadm.go:401] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.39@sha256:bf2d9f1e9d837d8deea073611d2605405b6be904647d97ebd9b12045ddfe1106 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.26.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/dev:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0703 10:54:12.420470   16841 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0703 10:54:12.432851   16841 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0703 10:54:12.439034   16841 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0703 10:54:12.444860   16841 kubeadm.go:226] ignoring SystemVerification for kubeadm because of docker driver
I0703 10:54:12.444901   16841 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0703 10:54:12.450470   16841 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0703 10:54:12.450524   16841 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0703 10:54:12.488301   16841 kubeadm.go:322] [init] Using Kubernetes version: v1.26.3
I0703 10:54:12.488344   16841 kubeadm.go:322] [preflight] Running pre-flight checks
I0703 10:54:12.561947   16841 kubeadm.go:322] [preflight] Pulling images required for setting up a Kubernetes cluster
I0703 10:54:12.561998   16841 kubeadm.go:322] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0703 10:54:12.562042   16841 kubeadm.go:322] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0703 10:54:12.651090   16841 kubeadm.go:322] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0703 10:54:12.657305   16841 out.go:204]     ▪ Generating certificates and keys ...
I0703 10:54:12.657411   16841 kubeadm.go:322] [certs] Using existing ca certificate authority
I0703 10:54:12.657478   16841 kubeadm.go:322] [certs] Using existing apiserver certificate and key on disk
I0703 10:54:12.657695   16841 kubeadm.go:322] W0703 10:54:12.484327   10111 initconfiguration.go:119] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
I0703 10:54:12.657798   16841 kubeadm.go:322] 	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
I0703 10:54:12.657881   16841 kubeadm.go:322] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0703 10:54:12.657946   16841 kubeadm.go:322] 	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
I0703 10:54:12.658186   16841 kubeadm.go:322] error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "minikubeCA")
W0703 10:54:12.658345   16841 out.go:239] 💢  initialization failed, will try again: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.26.3
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0703 10:54:12.484327   10111 initconfiguration.go:119] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "minikubeCA")
To see the stack trace of this error execute with --v=5 or higher

I0703 10:54:12.658396   16841 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force"
I0703 10:54:12.659181   16841 kubeadm.go:322] To see the stack trace of this error execute with --v=5 or higher
I0703 10:54:14.237424   16841 ssh_runner.go:235] Completed: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm reset --cri-socket /var/run/cri-dockerd.sock --force": (1.579011798s)
I0703 10:54:14.237471   16841 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service kubelet
I0703 10:54:14.244894   16841 kubeadm.go:226] ignoring SystemVerification for kubeadm because of docker driver
I0703 10:54:14.244943   16841 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0703 10:54:14.250109   16841 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0703 10:54:14.250148   16841 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0703 10:54:14.280332   16841 kubeadm.go:322] [init] Using Kubernetes version: v1.26.3
I0703 10:54:14.280373   16841 kubeadm.go:322] [preflight] Running pre-flight checks
I0703 10:54:14.358807   16841 kubeadm.go:322] [preflight] Pulling images required for setting up a Kubernetes cluster
I0703 10:54:14.358858   16841 kubeadm.go:322] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0703 10:54:14.358901   16841 kubeadm.go:322] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0703 10:54:14.442800   16841 kubeadm.go:322] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0703 10:54:14.452128   16841 out.go:204]     ▪ Generating certificates and keys ...
I0703 10:54:14.452231   16841 kubeadm.go:322] [certs] Using existing ca certificate authority
I0703 10:54:14.452335   16841 kubeadm.go:322] [certs] Using existing apiserver certificate and key on disk
I0703 10:54:14.452572   16841 kubeadm.go:322] W0703 10:54:14.276048   11318 initconfiguration.go:119] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
I0703 10:54:14.452684   16841 kubeadm.go:322] 	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
I0703 10:54:14.452771   16841 kubeadm.go:322] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0703 10:54:14.452841   16841 kubeadm.go:322] 	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
I0703 10:54:14.452988   16841 kubeadm.go:322] error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "minikubeCA")
I0703 10:54:14.453070   16841 kubeadm.go:403] StartCluster complete in 2.032698171s
I0703 10:54:14.453093   16841 kubeadm.go:322] To see the stack trace of this error execute with --v=5 or higher
I0703 10:54:14.453102   16841 cri.go:52] listing CRI containers in root : {State:all Name:kube-apiserver Namespaces:[]}
I0703 10:54:14.453151   16841 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-apiserver
I0703 10:54:14.477685   16841 cri.go:87] found id: ""
I0703 10:54:14.477697   16841 logs.go:277] 0 containers: []
W0703 10:54:14.477701   16841 logs.go:279] No container was found matching "kube-apiserver"
I0703 10:54:14.477705   16841 cri.go:52] listing CRI containers in root : {State:all Name:etcd Namespaces:[]}
I0703 10:54:14.477776   16841 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=etcd
I0703 10:54:14.493543   16841 cri.go:87] found id: ""
I0703 10:54:14.493556   16841 logs.go:277] 0 containers: []
W0703 10:54:14.493560   16841 logs.go:279] No container was found matching "etcd"
I0703 10:54:14.493564   16841 cri.go:52] listing CRI containers in root : {State:all Name:coredns Namespaces:[]}
I0703 10:54:14.493610   16841 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=coredns
I0703 10:54:14.508740   16841 cri.go:87] found id: ""
I0703 10:54:14.508752   16841 logs.go:277] 0 containers: []
W0703 10:54:14.508756   16841 logs.go:279] No container was found matching "coredns"
I0703 10:54:14.508760   16841 cri.go:52] listing CRI containers in root : {State:all Name:kube-scheduler Namespaces:[]}
I0703 10:54:14.508805   16841 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-scheduler
I0703 10:54:14.525445   16841 cri.go:87] found id: ""
I0703 10:54:14.525456   16841 logs.go:277] 0 containers: []
W0703 10:54:14.525460   16841 logs.go:279] No container was found matching "kube-scheduler"
I0703 10:54:14.525464   16841 cri.go:52] listing CRI containers in root : {State:all Name:kube-proxy Namespaces:[]}
I0703 10:54:14.525507   16841 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-proxy
I0703 10:54:14.540383   16841 cri.go:87] found id: ""
I0703 10:54:14.540394   16841 logs.go:277] 0 containers: []
W0703 10:54:14.540398   16841 logs.go:279] No container was found matching "kube-proxy"
I0703 10:54:14.540402   16841 cri.go:52] listing CRI containers in root : {State:all Name:kube-controller-manager Namespaces:[]}
I0703 10:54:14.540447   16841 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kube-controller-manager
I0703 10:54:14.556005   16841 cri.go:87] found id: ""
I0703 10:54:14.556019   16841 logs.go:277] 0 containers: []
W0703 10:54:14.556026   16841 logs.go:279] No container was found matching "kube-controller-manager"
I0703 10:54:14.556031   16841 cri.go:52] listing CRI containers in root : {State:all Name:kindnet Namespaces:[]}
I0703 10:54:14.556094   16841 ssh_runner.go:195] Run: sudo crictl ps -a --quiet --name=kindnet
I0703 10:54:14.572374   16841 cri.go:87] found id: ""
I0703 10:54:14.572385   16841 logs.go:277] 0 containers: []
W0703 10:54:14.572389   16841 logs.go:279] No container was found matching "kindnet"
I0703 10:54:14.572396   16841 logs.go:123] Gathering logs for kubelet ...
I0703 10:54:14.572404   16841 ssh_runner.go:195] Run: /bin/bash -c "sudo journalctl -u kubelet -n 400"
I0703 10:54:14.579264   16841 logs.go:123] Gathering logs for dmesg ...
I0703 10:54:14.579275   16841 ssh_runner.go:195] Run: /bin/bash -c "sudo dmesg -PH -L=never --level warn,err,crit,alert,emerg | tail -n 400"
I0703 10:54:14.596682   16841 logs.go:123] Gathering logs for describe nodes ...
I0703 10:54:14.596695   16841 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.3/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig"
W0703 10:54:14.640283   16841 logs.go:130] failed describe nodes: command: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.3/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig" /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.3/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig": Process exited with status 1
stdout:

stderr:
E0703 10:54:14.632575   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
E0703 10:54:14.633038   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
E0703 10:54:14.634233   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
E0703 10:54:14.635623   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
E0703 10:54:14.636914   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
The connection to the server localhost:8443 was refused - did you specify the right host or port?
 output: 
** stderr ** 
E0703 10:54:14.632575   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
E0703 10:54:14.633038   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
E0703 10:54:14.634233   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
E0703 10:54:14.635623   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
E0703 10:54:14.636914   11475 memcache.go:265] couldn't get current server API group list: Get "https://localhost:8443/api?timeout=32s": dial tcp 127.0.0.1:8443: connect: connection refused
The connection to the server localhost:8443 was refused - did you specify the right host or port?

** /stderr **
I0703 10:54:14.640290   16841 logs.go:123] Gathering logs for Docker ...
I0703 10:54:14.640298   16841 ssh_runner.go:195] Run: /bin/bash -c "sudo journalctl -u docker -u cri-docker -n 400"
I0703 10:54:14.674057   16841 logs.go:123] Gathering logs for container status ...
I0703 10:54:14.674073   16841 ssh_runner.go:195] Run: /bin/bash -c "sudo `which crictl || echo crictl` ps -a || sudo docker ps -a"
W0703 10:54:14.690566   16841 out.go:369] Error starting cluster: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.26.3
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0703 10:54:14.276048   11318 initconfiguration.go:119] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "minikubeCA")
To see the stack trace of this error execute with --v=5 or higher
W0703 10:54:14.690580   16841 out.go:239] 
W0703 10:54:14.691300   16841 out.go:239] 💣  Error starting cluster: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.26.3
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0703 10:54:14.276048   11318 initconfiguration.go:119] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "minikubeCA")
To see the stack trace of this error execute with --v=5 or higher

W0703 10:54:14.691329   16841 out.go:239] 
W0703 10:54:14.691838   16841 out.go:239] [31m╭───────────────────────────────────────────────────────────────────────────────────────────╮[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    😿  If the above advice does not help, please let us know:                             [31m│[0m
[31m│[0m    👉  https://github.com/kubernetes/minikube/issues/new/choose                           [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m╰───────────────────────────────────────────────────────────────────────────────────────────╯[0m
I0703 10:54:14.701563   16841 out.go:177] 
W0703 10:54:14.708389   16841 out.go:239] ❌  Exiting due to GUEST_START: failed to start node: wait: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.26.3
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0703 10:54:14.276048   11318 initconfiguration.go:119] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
error execution phase certs/apiserver-kubelet-client: [certs] certificate apiserver-kubelet-client not signed by CA certificate ca: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "minikubeCA")
To see the stack trace of this error execute with --v=5 or higher

W0703 10:54:14.708432   16841 out.go:239] 
W0703 10:54:14.709590   16841 out.go:239] [31m╭───────────────────────────────────────────────────────────────────────────────────────────╮[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    😿  If the above advice does not help, please let us know:                             [31m│[0m
[31m│[0m    👉  https://github.com/kubernetes/minikube/issues/new/choose                           [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m╰───────────────────────────────────────────────────────────────────────────────────────────╯[0m
I0703 10:54:14.720926   16841 out.go:177] 

* 
* ==> Docker <==
* -- Logs begin at Mon 2023-07-03 10:36:12 UTC, end at Mon 2023-07-03 10:54:36 UTC. --
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"format\\\"\". Proceed without further sandbox information."
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox format\": invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"format\\\"\". Proceed without further sandbox information."
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox format\": invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"format\\\"\". Proceed without further sandbox information."
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"format\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDformat\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"format\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox endpoint=\"/var/run/cri-dockerd.sock\": invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=info msg="Both sandbox container and checkpoint could not be found with id \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\". Proceed without further sandbox information."
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="CNI failed to delete loopback network: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\"Failed to delete corrupt checkpoint for sandboxpodSandboxIDendpoint=\"/var/run/cri-dockerd.sock\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Error deleting network when building cni runtime conf: could not retrieve port mappings: invalid key: \"endpoint=\\\"/var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""
Jul 03 10:54:14 minikube cri-dockerd[9905]: time="2023-07-03T10:54:14Z" level=error msg="Failed to delete corrupt checkpoint for sandbox URL=\"unix:///var/run/cri-dockerd.sock\": invalid key: \"URL=\\\"unix:///var/run/cri-dockerd.sock\\\"\""

* 
* ==> container status <==
* CONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID

* 
* ==> describe nodes <==
* 
* ==> dmesg <==
* [  +0.000004] FS-Cache: N-cookie c=000000002ff7fd2b [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=0000000061243f5d
[  +0.000001] FS-Cache: N-key=[8] 'ea79070000000600'
[  +0.002200] FS-Cache: Duplicate cookie detected
[  +0.000006] FS-Cache: O-cookie c=000000006289dd01 [p=00000000d8bf2b3c fl=226 nc=0 na=1]
[  +0.000002] FS-Cache: O-cookie d=00000000f60b96e0 n=00000000dc875851
[  +0.000001] FS-Cache: O-key=[8] 'ea79070000000600'
[  +0.000003] FS-Cache: N-cookie c=000000002ff7fd2b [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=000000004dc92c2f
[  +0.000001] FS-Cache: N-key=[8] 'ea79070000000600'
[ +48.151306] WSL2: Performing memory compaction.
[Jul 3 10:54] FS-Cache: Duplicate cookie detected
[  +0.000007] FS-Cache: O-cookie c=000000006289dd01 [p=00000000d8bf2b3c fl=226 nc=0 na=1]
[  +0.000001] FS-Cache: O-cookie d=00000000f60b96e0 n=00000000dc875851
[  +0.000001] FS-Cache: O-key=[8] 'ea79070000000600'
[  +0.000003] FS-Cache: N-cookie c=0000000074b6ec15 [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=000000005d9e9488
[  +0.000001] FS-Cache: N-key=[8] 'ea79070000000600'
[  +0.001742] FS-Cache: Duplicate cookie detected
[  +0.000006] FS-Cache: O-cookie c=000000006289dd01 [p=00000000d8bf2b3c fl=226 nc=0 na=1]
[  +0.000001] FS-Cache: O-cookie d=00000000f60b96e0 n=00000000dc875851
[  +0.000001] FS-Cache: O-key=[8] 'ea79070000000600'
[  +0.000003] FS-Cache: N-cookie c=0000000074b6ec15 [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=0000000048c4f2f9
[  +0.000001] FS-Cache: N-key=[8] 'ea79070000000600'
[  +0.110876] FS-Cache: Duplicate cookie detected
[  +0.000015] FS-Cache: O-cookie c=00000000131d49a1 [p=00000000d8bf2b3c fl=226 nc=0 na=1]
[  +0.000022] FS-Cache: O-cookie d=00000000f60b96e0 n=000000004ff162dc
[  +0.000002] FS-Cache: O-key=[8] '2fd0020000007200'
[  +0.000003] FS-Cache: N-cookie c=0000000074b6ec15 [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=00000000c6480c54
[  +0.000001] FS-Cache: N-key=[8] '2fd0020000007200'
[  +0.036705] FS-Cache: Duplicate cookie detected
[  +0.000012] FS-Cache: O-cookie c=000000006289dd01 [p=00000000d8bf2b3c fl=226 nc=0 na=1]
[  +0.000002] FS-Cache: O-cookie d=00000000f60b96e0 n=00000000dc875851
[  +0.000001] FS-Cache: O-key=[8] 'ea79070000000600'
[  +0.000003] FS-Cache: N-cookie c=0000000051c9f1a9 [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=0000000048c4f2f9
[  +0.000001] FS-Cache: N-key=[8] 'ea79070000000600'
[  +0.001411] FS-Cache: Duplicate cookie detected
[  +0.000003] FS-Cache: O-cookie c=000000006289dd01 [p=00000000d8bf2b3c fl=226 nc=0 na=1]
[  +0.000001] FS-Cache: O-cookie d=00000000f60b96e0 n=00000000dc875851
[  +0.000001] FS-Cache: O-key=[8] 'ea79070000000600'
[  +0.000003] FS-Cache: N-cookie c=0000000051c9f1a9 [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=0000000026c20c81
[  +0.000001] FS-Cache: N-key=[8] 'ea79070000000600'
[  +0.026926] FS-Cache: Duplicate cookie detected
[  +0.000007] FS-Cache: O-cookie c=000000006289dd01 [p=00000000d8bf2b3c fl=226 nc=0 na=1]
[  +0.000002] FS-Cache: O-cookie d=00000000f60b96e0 n=00000000dc875851
[  +0.000001] FS-Cache: O-key=[8] 'ea79070000000600'
[  +0.000003] FS-Cache: N-cookie c=0000000051c9f1a9 [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=000000000fd90fcf
[  +0.000001] FS-Cache: N-key=[8] 'ea79070000000600'
[  +0.001718] FS-Cache: Duplicate cookie detected
[  +0.000004] FS-Cache: O-cookie c=000000006289dd01 [p=00000000d8bf2b3c fl=226 nc=0 na=1]
[  +0.000002] FS-Cache: O-cookie d=00000000f60b96e0 n=00000000dc875851
[  +0.000001] FS-Cache: O-key=[8] 'ea79070000000600'
[  +0.000003] FS-Cache: N-cookie c=0000000051c9f1a9 [p=00000000d8bf2b3c fl=2 nc=0 na=1]
[  +0.000001] FS-Cache: N-cookie d=00000000f60b96e0 n=0000000060bffdee
[  +0.000001] FS-Cache: N-key=[8] 'ea79070000000600'

* 
* ==> kernel <==
*  10:54:36 up 24 min,  0 users,  load average: 0.66, 1.04, 1.55
Linux minikube 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
PRETTY_NAME="Ubuntu 20.04.5 LTS"

* 
* ==> kubelet <==
* -- Logs begin at Mon 2023-07-03 10:36:12 UTC, end at Mon 2023-07-03 10:54:36 UTC. --
-- No entries --

